package djangounchained.physics;

import javafx.animation.*;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class Ui extends Application {
    static String menuPic, homePic, helpPic;
    static Color omori = Color.web("#6c0ffe");
    static Circle c;

    static ArrayList<Circle> standList = new ArrayList<>();
    static ArrayList<Circle> travelList = new ArrayList<>();
    static ArrayList<Circle> reTravelList = new ArrayList<>();

    static Timer timer;
    static Line vertGrid, horiGrid, xIndic, yIndic;
    static ArrayList<Line> hLineList = new ArrayList<>();
    static ArrayList<Line> vLineList = new ArrayList<>();
    static ArrayList<Line> xIndiList = new ArrayList<>();
    static ArrayList<Line> yIndiList = new ArrayList<>();
    static Text xL, yL;
    static ArrayList<Text> xLabelList = new ArrayList<>();
    static ArrayList<Text> yLabelList = new ArrayList<>();
    static int startPauseCounter = 0;

    static double A, f, T, omega, lambda, k, xPos, timeElapsed;
    static int stringLength = 490;
    static double timeToReachEnd = 4.9;
    static double v = 100;

    @Override
    public void start(Stage stage) {
        /**
         * JSON file
         */
        JSONParser jsonParser = new JSONParser();
        try {
            Object o = jsonParser.parse(new FileReader(this.getClass().getClassLoader()
                    .getResource("index.json").getFile()));
            JSONObject jsonObject = (JSONObject) o;
            menuPic = (String) jsonObject.get("menuIcon");
            homePic = (String) jsonObject.get("homeIcon");
            helpPic = (String) jsonObject.get("newtonSecondStagePic");
        }
        catch (ParseException | IOException e) {
            e.printStackTrace();
        }

        /**
         * Setting up the Main Page
         */
        BorderPane root = new BorderPane();
        root.setPadding(new Insets(10));

        /**
         * Navigation Button
         */
        //Pane for settings
        HBox nagivationHBox = new HBox(230);
        nagivationHBox.setPadding(new Insets(10, 5, 5, 5));
        Pane menuPane = new Pane();

        //Toggling the incident and reflect rays visibility
        Menu raysVis = new Menu("Toggle Rays");
        CheckMenuItem raysOn = new CheckMenuItem("On");
        CheckMenuItem raysOff = new CheckMenuItem("Off");
        raysOn.setSelected(true);
        raysVis.getItems().addAll(raysOn, raysOff);

        //Toggling grid visibility
        Menu objects = new Menu("Toggle Grid");
        CheckMenuItem gridOn = new CheckMenuItem("On");
        CheckMenuItem gridOff = new CheckMenuItem("Off");
        gridOn.setSelected(true);
        objects.getItems().addAll(gridOn, gridOff);

        //Change themes
        Menu theme = new Menu("Theme");
        CheckMenuItem lightMode = new CheckMenuItem("Light Mode");
        CheckMenuItem darkMode = new CheckMenuItem("Dark Mode");
        lightMode.setSelected(true);
        theme.getItems().addAll(lightMode,darkMode);

        //Time effects
        Menu showForces = new Menu("Time");
        CheckMenuItem showForcesOn = new CheckMenuItem("Slow Motion");
        CheckMenuItem showForcesOff = new CheckMenuItem("Normal");
        CheckMenuItem fastMotion = new CheckMenuItem("Fast Motion");
        showForcesOff.setSelected(true);
        showForces.getItems().addAll(showForcesOn, showForcesOff, fastMotion);

        //Help MenuItem
        MenuItem menuHelp = new MenuItem("Help");
        Pane helpPane = new Pane();
        ImageView shulkNo = new ImageView(new Image("https://www.siliconera.com/wp-content/uploads/2020/03/xbc-de-16.jpg"));
        Text subtitle = new Text("No!");
        subtitle.setFont(Font.font("Consolas", FontWeight.NORMAL, FontPosture.REGULAR, 35));
        subtitle.setFill(Color.WHITE);
        subtitle.setLayoutX(538);
        subtitle.setLayoutY(560);
        helpPane.getChildren().addAll(shulkNo, subtitle);
        Scene theoryScene = new Scene(helpPane);
        Stage secondaryStage = new Stage();
        secondaryStage.setTitle("Loss");
        secondaryStage.setResizable(false);
        secondaryStage.setScene(theoryScene);
        menuHelp.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                secondaryStage.show();
            }
        });
        
        //Additional Settings
        MenuItem exitProgram = new MenuItem("Exit Program");
        MenuButton menuBtn = new MenuButton("Menu", null, raysVis,theme, objects, showForces, menuHelp, exitProgram);
        Image menuIcon = new Image(menuPic);
        ImageView menuView = new ImageView(menuIcon);
        menuView.setPreserveRatio(true);
        menuView.setFitHeight(25);
        menuBtn.setGraphic(menuView);
        menuBtn.setId("navigation");
        menuPane.getChildren().addAll(menuBtn);

        //Menu Settings
        Image homeIcon = new Image(homePic);
        ImageView homeView = new ImageView(homeIcon);
        homeView.setPreserveRatio(true);
        homeView.setFitHeight(80);
        Button homeBtn = new Button();
        homeBtn.setGraphic(homeView);
        homeBtn.setId("navigation");

        //Home Button settings
        Label warning = new Label();
        warning.setId("warning");
        warning.setVisible(false);
        nagivationHBox.getChildren().addAll(homeBtn,warning, menuPane);
        nagivationHBox.setAlignment(Pos.CENTER);

        //The Top Buttons
        VBox controls = new VBox(10);
        root.setTop(controls);
        HBox menuCtrl = new HBox();
        menuCtrl.getChildren().add(nagivationHBox);
        controls.getChildren().add(menuCtrl);

        //The UI Controls
        HBox ui = new HBox(120);
        ui.setAlignment(Pos.CENTER);
        controls.getChildren().add(ui);

        /**
         * Sliders
         * Always make the waves "snap" (clear first and then implement new values)
         */
        VBox params = new VBox(5);

        //Frequency: "clear" the values (for a split second) then implementing the new value
        TextField freqTf = new TextField("Frequency [Hz]");
        freqTf.setAlignment(Pos.CENTER);
        freqTf.setEditable(false);
        Slider freqSldr = new Slider(0, 1, 0);
        freqSldr.setShowTickLabels(true);
        freqSldr.setShowTickMarks(true);
        freqSldr.setMajorTickUnit(0.1);

        freqSldr.valueProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observableValue, Number number, Number t1) {
                f = freqSldr.getValue();
                freqTf.setText(String.format("%.2f", freqSldr.getValue()) + " Hz");
            }
        });

        //Wave Speed
        TextField wavSpdTf = new TextField("Wave Speed [cm/s]");
        wavSpdTf.setAlignment(Pos.CENTER);
        wavSpdTf.setEditable(false);
        Slider wavSpdSldr = new Slider(0, 500, 0);
        wavSpdSldr.setShowTickLabels(true);
        wavSpdSldr.setShowTickMarks(true);

        wavSpdSldr.valueProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observableValue, Number number, Number t1) {
                v = wavSpdSldr.getValue();
                wavSpdTf.setText(String.format("%.2f", wavSpdSldr.getValue()) + " cm/s");
            }
        });

        //Amplitude (changing the slider keeps the amp at max (snap) then implement new value)
        TextField ampTf = new TextField("Amplitude [cm]");
        ampTf.setAlignment(Pos.CENTER);
        ampTf.setEditable(false);
        Slider ampSldr = new Slider(0, 80, 0);
        ampSldr.setShowTickMarks(true);
        ampSldr.setShowTickLabels(true);

        ampSldr.valueProperty().addListener(new ChangeListener<Number>() {
            @Override
            public void changed(ObservableValue<? extends Number> observableValue, Number number, Number t1) {
                A = ampSldr.getValue();
                ampTf.setText(String.format("%.2f", ampSldr.getValue()) + " cm");
            }
        });

        params.getChildren().addAll(freqTf, freqSldr, wavSpdTf, wavSpdSldr, ampTf, ampSldr);

        Button playBtn = new Button("Start");
        Button btn3 = new Button("Help");
        Pane helpPane2 = new Pane();
        ImageView astolfo = new ImageView(new Image("https://img5.goodfon.com/wallpaper/nbig/0/ad/fate-apocrypha-sudba-apokrif-astolfo-shorty-ulybka-topik.jpg"));
        helpPane2.getChildren().add(astolfo);
        Scene helpScene = new Scene(helpPane2);
        Stage astolfoStage = new Stage();
        astolfoStage.setTitle("Show Me The Trello");
        astolfoStage.setScene(helpScene);
        btn3.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                astolfoStage.show();
            }
        });
        ui.getChildren().addAll(params, playBtn, btn3);


        /**
         * Displaying the waves
         */
        Pane wavesPane = new Pane();
        wavesPane.setPrefWidth(960);
        wavesPane.setPrefHeight(320);

        /**
         * Setting up the grid
         */
        Text scaleText = new Text("1 px : 1 cm");
        scaleText.setLayoutX(wavesPane.getPrefWidth() - 30);
        scaleText.setLayoutY(wavesPane.getPrefHeight());
        wavesPane.getChildren().add(scaleText);
        //Grid lines
        for(int i = 0; i <= wavesPane.getPrefHeight(); i += 20) {
            horiGrid = new Line(0, i, 980, i);
            horiGrid.setStroke(Color.LIGHTGRAY);
            hLineList.add(horiGrid);
            wavesPane.getChildren().add(horiGrid);
        }

        for(int i = 10; i <= 990; i += 20) {
            vertGrid = new Line(i, 0, i, wavesPane.getPrefHeight());
            vertGrid.setStroke(Color.LIGHTGRAY);
            vLineList.add(vertGrid);
            wavesPane.getChildren().add(vertGrid);
        }

        /**
         * Toggle Grid
         */
        gridOn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                for(Line l: hLineList) {
                    wavesPane.getChildren().add(l);
                }
                for(Line l: vLineList) {
                    wavesPane.getChildren().add(l);
                }
                gridOff.setSelected(false);
            }
        });

        gridOff.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                for(Line l: hLineList) {
                    wavesPane.getChildren().remove(l);
                }
                for(Line l: vLineList) {
                    wavesPane.getChildren().remove(l);
                }
                gridOn.setSelected(false);
            }
        });

        /**
         * Creating Axis Lines
         */
        Line xAxis = new Line();
        Line yAxis = new Line();
        wavesPane.getChildren().addAll(xAxis, yAxis);
        xAxis.setStartX(0);
        xAxis.setEndX(960);
        xAxis.setStartY(wavesPane.getPrefHeight() / 2);
        xAxis.setEndY(wavesPane.getPrefHeight() / 2);
        yAxis.setStartX(10);
        yAxis.setEndX(10);
        yAxis.setStartY(0);
        yAxis.setEndY(wavesPane.getPrefHeight());

        //X-Axis indices
        for(int i = 30; i < 980; i += 20) {
            xIndic = new Line(i, xAxis.getStartY() - 10, i, xAxis.getStartY() + 10);
            xIndiList.add(xIndic);
            wavesPane.getChildren().add(xIndic);
        }
        for(int i = 100; i < 980; i += 100) {
            int actNb = i - 50;
            xL = new Text("" + actNb);
            xL.setFont(Font.font("Consolas", FontWeight.BOLD, FontPosture.REGULAR, 11));
            xL.setLayoutX(i + 1);
            xL.setLayoutY(xAxis.getStartY() + 20);
            xLabelList.add(xL);
            wavesPane.getChildren().add(xL);
        }

        //Y-Axis indices
        for(int i = 570; i >= 370; i -= 25) {
            yIndic = new Line(yAxis.getStartX() + 10, i, yAxis.getStartX() - 10, i);
            yIndiList.add(yIndic);
            wavesPane.getChildren().add(yIndic);
        }
        for(int i = 320; i >= 0; i -= 20) {
            int actNb = (int) ((i - xAxis.getStartY()) / 2);
            yL = new Text("" + actNb*-1);
            yL.setFont(Font.font("Consanas", FontWeight.BOLD, FontPosture.REGULAR, 11));
            yL.setLayoutX(-9);
            yL.setLayoutY(i + 4);
            yLabelList.add(yL);
            wavesPane.getChildren().add(yL);
        }

        /**
         * Creating the incident traveling wave
         */
        for(int i = 10; i < 990; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 2, Color.CORNFLOWERBLUE);
            travelList.add(c);
        }
        for(Circle c: travelList) {
            wavesPane.getChildren().add(c);
        }

        /**
         * Creating the reflected traveling wave
         */
        for(int i = 10; i < 990; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 2, Color.MAROON);
            reTravelList.add(c);
        }
        for(Circle c: reTravelList) {
            wavesPane.getChildren().add(c);
        }

        /**
         * Creating the standing wave
         */
        for(int i = 10; i < 990; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 3, Color.DARKMAGENTA);
            standList.add(c);
        }
        for(Circle c: standList) {
            wavesPane.getChildren().add(c);
        }

        /**
         * Change Theme
         */
        lightMode.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                root.setStyle("-fx-background-color: white");
                xAxis.setStroke(Color.BLACK);
                yAxis.setStroke(Color.BLACK);
                for(Line l: xIndiList) {
                    l.setStroke(Color.BLACK);
                }
                for(Text t: xLabelList) {
                    t.setFill(Color.BLACK);
                }
                for(Line l: yIndiList) {
                    l.setStroke(Color.BLACK);
                }
                for(Text t: yLabelList) {
                    t.setFill(Color.BLACK);
                }
                for(Circle c: travelList) {
                    c.setStroke(Color.CORNFLOWERBLUE);
                }
                for(Circle c: reTravelList) {
                    c.setStroke(Color.MAROON);
                }
                for(Circle c: standList) {
                    c.setStroke(Color.DARKMAGENTA);
                }
                scaleText.setFill(Color.WHITE);
                darkMode.setSelected(false);
            }
        });

        darkMode.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                root.setStyle("-fx-background-color: #303030");
                xAxis.setStroke(Color.WHITE);
                yAxis.setStroke(Color.WHITE);
                for(Line l: xIndiList) {
                    l.setStroke(Color.WHITE);
                }
                for(Text t: xLabelList) {
                    t.setFill(Color.WHITE);
                }
                for(Line l: yIndiList) {
                    l.setStroke(Color.WHITE);
                }
                for(Text t: yLabelList) {
                    t.setFill(Color.WHITE);
                }
                for(Circle c: travelList) {
                    c.setStroke(Color.CYAN);
                }
                for(Circle c: reTravelList) {
                    c.setStroke(Color.ORANGERED);
                }
                for(Circle c: standList) {
                    c.setStroke(omori);
                }
                scaleText.setFill(Color.WHITE);
                lightMode.setSelected(false);
            }
        });

        /**
         * Toggle Wave Visibility
         */
        raysOn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                for(Circle c: travelList) {
                    wavesPane.getChildren().add(c);
                }
                for(Circle c: reTravelList) {
                    wavesPane.getChildren().add(c);
                }
                raysOff.setSelected(false);
            }
        });

        raysOff.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                for(Circle c: travelList) {
                    wavesPane.getChildren().remove(c);
                }
                for(Circle c: reTravelList) {
                    wavesPane.getChildren().remove(c);
                }
                raysOn.setSelected(false);
            }
        });

        /**
         * Timer
         */
        AnimationTimer animateTimer = new AnimationTimer() {
            @Override
            public void handle(long l) {
                for(Circle c: standList){
                    timeElapsed = timer.elapsed();
                    xPos = c.getCenterX() - 10;
                    omega = 2 * Math.PI * f;
                    lambda = v / f;
                    k = (2 * Math.PI) / lambda;
                    c.setCenterY(2 * A * Math.cos(omega * timeElapsed) * Math.sin(k * xPos) + wavesPane.getHeight()/2);
                }
                for(Circle c: travelList) {
                    timeElapsed = timer.elapsed();
                    xPos = c.getCenterX() - 10;
                    omega = 2 * Math.PI * f;
                    lambda = v / f;
                    k = (2 * Math.PI) / lambda;
                    c.setCenterY(A * Math.sin(k * xPos - omega * timeElapsed) + wavesPane.getHeight()/2);
                }
                for(Circle c: reTravelList) {
                    timeElapsed = timer.elapsed();
                    xPos = c.getCenterX() - 10;
                    omega = 2 * Math.PI * f;
                    lambda = v / f;
                    k = (2 * Math.PI) / lambda;
                    c.setCenterY(A * Math.sin(k * xPos + omega * timeElapsed) + wavesPane.getHeight()/2);
                }
            }
        };

        /**
         * Setting up the Play button
         */
        playBtn.setOnAction(actionEvent -> {
            boolean isRunning = true;
            timer = new Timer();
            animateTimer.start();
            playBtn.setText("Stop");

            if(!isRunning) {
                animateTimer.stop();
                playBtn.setText("Start");
            }
        });

        root.setCenter(wavesPane);

        /**
         * Brining it all together
         */
        Scene scene = new Scene(root, 1000, 650);
        scene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
        stage.setTitle("Physics Learning Tool");
        stage.setResizable(false);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}
