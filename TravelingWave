package com.example.demo;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;

public class Ui extends Application {
    // Class Variables
    static String menuPic, homePic, helpPic, nMenuPic;
    static Color omori = Color.web("#6c0ffe");
    static Circle c;
    static Timer timer;
    static Line vertGrid, horiGrid, xIndic, yIndic;
    static Text xL, yL;
    static Font font = Font.font("Verdana", FontWeight.NORMAL, FontPosture.REGULAR, 14);
    static ArrayList<Circle> standList = new ArrayList<>();
    static ArrayList<Circle> travelList = new ArrayList<>();
    static ArrayList<Circle> reTravelList = new ArrayList<>();
    static ArrayList<Line> hLineList = new ArrayList<>();
    static ArrayList<Line> vLineList = new ArrayList<>();
    static ArrayList<Line> xIndiList = new ArrayList<>();
    static ArrayList<Line> yIndiList = new ArrayList<>();
    static ArrayList<Text> xLabelList = new ArrayList<>();
    static ArrayList<Text> yLabelList = new ArrayList<>();
    static int stringLength = 940;
    static int startPauseCounter, incidentCounter, reflectedCounter, standingCounter = 0;
    static double A, f, T, v, omega, lambda, k, waveLength, timeToReachEnd, timeElapsed, timeWhenStopped,
            totalTimeWhenStopped, modeNumberOneValue, modeNumberTwoValue, modeNumberThreeValue, modeNumberFourValue,
            modeNumberFiveValue, modeNumberSixValue;
    static Pane wavesPane;

    Ui(Stage travelWaveStage) {
        start(travelWaveStage);
    }

    @Override
    public void start(Stage stage) {

        // Creation of wavesPane and Pause/Play Button
        Button playBtn = new Button("Play");
        playBtn.setId("controlButton");
        wavesPane = new Pane();
        wavesPane.setPrefWidth(960);
        wavesPane.setPrefHeight(384);

        // Retrieving Data from JSON
        JSONParser jsonParser = new JSONParser();
        try {
            Object o = jsonParser.parse(new FileReader(Objects.requireNonNull(
                    this.getClass().getClassLoader().getResource("index.json")).getFile()));
            JSONObject jsonObject = (JSONObject) o;
            menuPic = (String) jsonObject.get("menuIcon");
            homePic = (String) jsonObject.get("homeIcon");
            helpPic = (String) jsonObject.get("newtonSecondStagePic");
            nMenuPic = (String) jsonObject.get("nMenuIcon");
            modeNumberOneValue = Double.parseDouble((String) jsonObject.get("modeNumberOneValue"));
            modeNumberTwoValue = Double.parseDouble((String) jsonObject.get("modeNumberTwoValue"));
            modeNumberThreeValue = Double.parseDouble((String) jsonObject.get("modeNumberThreeValue"));
            modeNumberFourValue = Double.parseDouble((String) jsonObject.get("modeNumberFourValue"));
            modeNumberFiveValue = Double.parseDouble((String) jsonObject.get("modeNumberFiveValue"));
            modeNumberSixValue = Double.parseDouble((String) jsonObject.get("modeNumberSixValue"));
        }
        catch (ParseException | IOException e) {
            e.printStackTrace();
        }

        // Main Page Setup
        BorderPane root = new BorderPane();
        root.setPadding(new Insets(10));
        // Settings
        Pane navigationHBox = new Pane();
        Menu settings = new Menu("Settings");

        // Menu & CheckMenuItems - Toggle Visibility of Wave(s)
        Menu raysVis = new Menu("Toggle Waves");
        CheckMenuItem toggleIncident = new CheckMenuItem("Incident");
        CheckMenuItem toggleReflected = new CheckMenuItem("Reflected");
        CheckMenuItem toggleStanding = new CheckMenuItem("Standing");
        toggleIncident.setSelected(true);
        toggleReflected.setSelected(true);
        toggleStanding.setSelected(true);
        raysVis.getItems().addAll(toggleIncident, toggleReflected, toggleStanding);

        // Menu & CheckMenuItems - Mode Shapes/Numbers
        Menu modeNumber = new Menu("Mode Shapes");
        CheckMenuItem modeNumberOne = new CheckMenuItem("Mode Shape 1");
        CheckMenuItem modeNumberTwo = new CheckMenuItem("Mode Shape 2");
        CheckMenuItem modeNumberThree = new CheckMenuItem("Mode Shape 3");
        CheckMenuItem modeNumberFour = new CheckMenuItem("Mode Shape 4");
        CheckMenuItem modeNumberFive = new CheckMenuItem("Mode Shape 5");
        CheckMenuItem modeNumberSix = new CheckMenuItem("Mode Shape 6");
        modeNumber.getItems().addAll(modeNumberOne, modeNumberTwo, modeNumberThree, modeNumberFour, modeNumberFive,
                modeNumberSix);

        // Menu & CheckMenuItems - Toggle Grid Display
        Menu objects = new Menu("Grid Display");
        CheckMenuItem gridOn = new CheckMenuItem("On");
        CheckMenuItem gridOff = new CheckMenuItem("Off");
        gridOn.setSelected(true);
        objects.getItems().addAll(gridOn, gridOff);

        // Menu & CheckMenuItems - Change themes
        Menu theme = new Menu("Theme");
        CheckMenuItem lightMode = new CheckMenuItem("Light Mode");
        CheckMenuItem darkMode = new CheckMenuItem("Dark Mode");
        lightMode.setSelected(true);
        theme.getItems().addAll(lightMode, darkMode);

        // Menu & CheckMenuItems - Time Effects
        Menu showForces = new Menu("Time");
        CheckMenuItem slowMotion = new CheckMenuItem("Slow Motion");
        CheckMenuItem normalMotion = new CheckMenuItem("Normal");
        CheckMenuItem fastMotion = new CheckMenuItem("Fast Motion");
        normalMotion.setSelected(true);
        showForces.getItems().addAll(slowMotion, normalMotion, fastMotion);
        settings.getItems().addAll(raysVis, modeNumber, objects, theme, showForces);

        // Help (Instructions, Lesson on Standing Waves) MenuItem
        MenuItem menuHelp = new MenuItem("Help");
        ScrollPane helpPane = new ScrollPane();
        helpPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        helpPane.setPadding(new Insets(10));
        VBox theoVbox = new VBox(10);

        Text theoryTxt = new Text("""
                Crash Course on Standing Waves
                
                    In the settings of this simulation, you will find the option to switch between light and dark mode, the option to toggle
                the visibility of the travelling and standing waves.

                    To interact with the standing wave simulation, simply press ‘start’ after adjusting the values on the three sliders. In
                this simulation, there are sliders for each of the following parameters: amplitude, wave speed, and mode number. Adjusting
                these parameters will result in a standing wave being formed.

                * Amplitude [m]: the maximum displacement or distance moved by a point on a vibrating body or wave measured from its
                  equilibrium position. It is equal to one-half the length of the vibration path.
                * Wave Speed [m/s]: the distance the disturbance travels across a medium in a given amount of time. It can be calculated by
                  multiplying frequency with the wavelength of a wave.
                * Frequency [Hz]: the number of waves that pass a fixed point in a given amount of time. The hertz measurement, abbreviated
                  Hz, is the number of waves that pass by per second.
                """);
        theoryTxt.setFont(font);

        Text wavesEgDesc = new Text("Pictured below are visual representations of two travelling waves (green and " +
                "blue) that form a standing wave (red).");
        wavesEgDesc.setFont(font);

        ImageView wavesEg = new ImageView(new Image("https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Waventerference.gif/620px-Waventerference.gif"));
        wavesEg.setFitWidth(980);
        wavesEg.setFitHeight(418.8709677419355);

        Text theoryTxt2 = new Text("""
                What are standing waves and how are they created?
                
                    First, consider that waves always originate from some sort of event or disturbance. When two waves with the same
                amplitude and frequency move in opposite directions, they will respect the superposition principle and create what is known
                as an interference pattern. To elaborate, these two linear waves will either be added together or cancelled out.

                    Interestingly enough, you might have even come across this phenomena without realising it yourself: interference patterns
                are so common to our daily lives, and can be produced by waves in the water, sound waves, or even light waves.

                    Should you make the choice to further explore the concepts related to waves, a great starting point would be to consult
                these interesting articles written by Stephen Cohen (on his website, The Engineer’s Pulse, under the “For Physics Students”
                section:
                """);
        theoryTxt2.setFont(font);

        Hyperlink cohenBlog = new Hyperlink("theengineerspulse.blogspot.com/p/for-physics-students.html");
        cohenBlog.setFont(font);
        cohenBlog.setTextFill(Color.DODGERBLUE);
        cohenBlog.setOnAction(actionEvent -> getHostServices().showDocument(cohenBlog.getText()));

        Text theoEqn = new Text("""
                
                                Standing Wave: y(x, t) = 2Asin(kx)cos(ωt) [m]       Traveling Wave: y(x, t) = Asin(kx ± ωt) [m]
                 
                                                    Wave Speed: v = λf [m/s]        Wave Number: k = 2π/λ [rad/m]
                 
                                                                Angular Frequency: ⍵ = 2πf [rad/s]
                 
                Where:
                x [m]: a particle's x-axis position at a certain time
                y [m]: a particle's y-axis position at a certain time
                k [rad/m]: wave number
                A [m]: amplitude
                t [s]: time elapsed
                ω [rad/s]: angular frequency
                """);
        theoEqn.setFont(font);

        Line helpSeparator = new Line(0, 0, 1000, 0);

        Text sourcesTitle = new Text("Additional Sources Consulted");
        sourcesTitle.setFont(font);
        sourcesTitle.setUnderline(true);

        Text profDaveRef = new Text("""

                Youtube - Professor Dave Explains: Interference, Reflection, and Diffraction
                 Consulted on 2022/02/27""");
        profDaveRef.setFont(font);
        Hyperlink profDaveLink = new Hyperlink("www.youtube.com/watch?v=eW5VGGJuWtQ&t=195s");
        profDaveLink.setFont(font);
        profDaveLink.setTextFill(Color.DODGERBLUE);
        profDaveLink.setOnAction(actionEvent -> getHostServices().showDocument(profDaveLink.getText()));

        Text britAmpRef = new Text("""

                Brittanica.com - Physics: Amplitude
                 Consulted on 2022/02/27""");
        britAmpRef.setFont(font);
        Hyperlink britAmpLink = new Hyperlink("www.britannica.com/science/amplitude-physics");
        britAmpLink.setFont(font);
        britAmpLink.setTextFill(Color.DODGERBLUE);
        britAmpLink.setOnAction(actionEvent -> getHostServices().showDocument(britAmpLink.getText()));

        Text britWaveRef = new Text("""

                Brittanica.com - Physics: Standing Wave
                 Consulted on 2022/02/27""");
        britWaveRef.setFont(font);
        Hyperlink britWaveLink = new Hyperlink("www.britannica.com/science/standing-wave-physics");
        britWaveLink.setFont(font);
        britWaveLink.setTextFill(Color.DODGERBLUE);
        britWaveLink.setOnAction(actionEvent -> getHostServices().showDocument(britWaveLink.getText()));

        theoVbox.getChildren().addAll(theoryTxt, wavesEgDesc, wavesEg, theoryTxt2, cohenBlog, theoEqn, helpSeparator,
                sourcesTitle, profDaveRef, profDaveLink, britAmpRef, britAmpLink, britWaveRef, britWaveLink);
        helpPane.setContent(theoVbox);

        Scene theoryScene = new Scene(helpPane, 1000, 650);
        Stage secondaryStage = new Stage();
        secondaryStage.setTitle("Help");
        secondaryStage.setResizable(false);
        secondaryStage.setScene(theoryScene);
        menuHelp.setOnAction(actionEvent -> secondaryStage.show());

        // Exit Program & GoTo Menu Settings
        MenuItem exitProgram = new MenuItem("Exit Program");
        MenuButton menuBtn = new MenuButton("Menu", null, settings, menuHelp, exitProgram);
        Image menuIcon = new Image(menuPic);
        Image nMenuIcon = new Image(nMenuPic);
        ImageView menuView = new ImageView(menuIcon);
        menuView.setPreserveRatio(true);
        menuView.setFitHeight(25);
        menuBtn.setGraphic(menuView);
        menuBtn.setId("navigation");

        // Menu Settings
        Image homeIcon = new Image(homePic);
        ImageView homeView = new ImageView(homeIcon);
        homeView.setPreserveRatio(true);
        homeView.setFitHeight(80);
        Button homeBtn = new Button();
        homeBtn.setGraphic(homeView);
        homeBtn.setId("navigation");

        // Top HBox & Respective Buttons
        Text simTitle = new Text("Standing Wave Simulator");
        simTitle.setFont(Font.font("Verdana", FontWeight.BOLD, FontPosture.REGULAR, 20));
        navigationHBox.getChildren().addAll(menuBtn, simTitle, homeBtn);
        menuBtn.setLayoutX(10);
        homeBtn.setLayoutX(910);
        simTitle.setLayoutX(355);
        simTitle.setLayoutY(35);
        VBox controls = new VBox(20);
        root.setTop(controls);
        controls.getChildren().add(navigationHBox);

        // UI Controls
        HBox ui = new HBox(120);
        ui.setAlignment(Pos.CENTER);
        controls.getChildren().add(ui);

        Text coordinateTxt = new Text("Point Coordinates (x, y) = (           ,         )");
        Text periodTxt = new Text("Period = 0.000 s");
        Text omegaTxt = new Text("Angular Frequency = 0.000 rad/s");
        Text lambdaTxt = new Text("Wavelength = 0.000 cm");
        Text kTxt = new Text("Wave Number = 0.000 rad/cm");
        coordinateTxt.setId("texts");
        periodTxt.setId("texts");
        omegaTxt.setId("texts");
        lambdaTxt.setId("texts");
        kTxt.setId("texts");

        Pane sliders = new Pane();
        // Sliders - Frequency
        VBox freqVBox = new VBox(5);
        freqVBox.setAlignment(Pos.CENTER);
        Text freqText = new Text("Frequency [Hz]");
        TextField freqTf = new TextField("0.000 Hz");
        freqTf.setAlignment(Pos.CENTER);
        freqTf.setEditable(false);
        Slider freqSldr = new Slider(0, 5, 0);
        freqSldr.setMajorTickUnit(1);
        freqSldr.setMinorTickCount(4);

        freqSldr.valueProperty().addListener((observableValue, number, t1) -> {
            f = freqSldr.getValue();
            freqTf.setText(String.format("%.3f", freqSldr.getValue()) + " Hz");
            if (startPauseCounter > 0 && playBtn.getText().equals("Play")) {
                for (Circle c : standList) {
                    double sinTing = Math.sin(k * (c.getCenterX() - 30));
                    double cosTing = Math.cos(omega * (totalTimeWhenStopped));
                    double eq = 2 * A * sinTing * cosTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : travelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) - (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : reTravelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) + (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
            }
            T = 1 / f;
            omega = 2 * Math.PI * f;
            waveLength = v / f;
            k = (2 * Math.PI) / waveLength;
            timeToReachEnd = stringLength / v;
            periodTxt.setText("Period = " + String.format("%.3f", T) + " s");
            omegaTxt.setText("Angular Frequency = " + String.format("%.3f", omega) + " rad/s");
            lambdaTxt.setText("Wavelength = " + String.format("%.3f", lambda) + " cm");
            kTxt.setText("Wave Number = " + String.format("%.3f", k) + " rad/cm");
            if (Double.isInfinite(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isInfinite(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isInfinite(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isInfinite(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }
            if (Double.isNaN(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isNaN(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isNaN(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isNaN(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }

            modeNumberOne.setSelected(false);
            modeNumberTwo.setSelected(false);
            modeNumberThree.setSelected(false);
            modeNumberFour.setSelected(false);
            modeNumberFive.setSelected(false);
            modeNumberSix.setSelected(false);
        });
        freqVBox.getChildren().addAll(freqText,freqTf, freqSldr);

        // Sliders - Wave Speed
        VBox wavSpdVBox = new VBox(5);
        wavSpdVBox.setAlignment(Pos.CENTER);
        Text wavSpdText = new Text("Wave Speed [cm/s]");
        TextField wavSpdTf = new TextField("0.000 cm/s");
        wavSpdTf.setAlignment(Pos.CENTER);
        wavSpdTf.setEditable(false);
        Slider wavSpdSldr = new Slider(0, 1000, 0);
        wavSpdSldr.setMajorTickUnit(100);
        wavSpdSldr.setMinorTickCount(4);

        wavSpdSldr.valueProperty().addListener((observableValue, number, t1) -> {
            v = wavSpdSldr.getValue();
            wavSpdTf.setText(String.format("%.3f", wavSpdSldr.getValue()) + " cm/s");
            if (startPauseCounter > 0 && playBtn.getText().equals("Play")) {
                for (Circle c : standList) {
                    double sinTing = Math.sin(k * (c.getCenterX() - 30));
                    double cosTing = Math.cos(omega * (totalTimeWhenStopped));
                    double eq = 2 * A * sinTing * cosTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : travelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) - (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : reTravelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) + (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
            }
            T = 1 / f;
            omega = 2 * Math.PI * f;
            waveLength = v / f;
            k = (2 * Math.PI) / waveLength;
            timeToReachEnd = stringLength / v;
            periodTxt.setText("Period = " + String.format("%.3f", T) + " s");
            omegaTxt.setText("Angular Frequency = " + String.format("%.3f", omega) + " rad/s");
            lambdaTxt.setText("Wavelength = " + String.format("%.3f", lambda) + " cm");
            kTxt.setText("Wave Number = " + String.format("%.3f", k) + " rad/cm");
            if (Double.isInfinite(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isInfinite(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isInfinite(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isInfinite(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }
            if (Double.isNaN(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isNaN(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isNaN(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isNaN(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }
            modeNumberOne.setSelected(false);
            modeNumberTwo.setSelected(false);
            modeNumberThree.setSelected(false);
            modeNumberFour.setSelected(false);
            modeNumberFive.setSelected(false);
            modeNumberSix.setSelected(false);
        });
        wavSpdVBox.getChildren().addAll(wavSpdText,wavSpdTf,wavSpdSldr);


        // Sliders - Amplitude
        VBox ampVBox = new VBox(5);
        ampVBox.setAlignment(Pos.CENTER);
        Text ampText = new Text("Amplitude [cm]");
        TextField ampTf = new TextField("0.000 cm");
        ampTf.setAlignment(Pos.CENTER);
        ampTf.setEditable(false);
        Slider ampSldr = new Slider(0, 60, 0);
        ampSldr.setMajorTickUnit(5);
        ampSldr.setMinorTickCount(4);

        ampSldr.valueProperty().addListener((observableValue, number, t1) -> {
            A = ampSldr.getValue();
            ampTf.setText(String.format("%.3f", ampSldr.getValue()) + " cm");
            if (startPauseCounter > 0 && playBtn.getText().equals("Play")) {
                for (Circle c : standList) {
                    double sinTing = Math.sin(k * (c.getCenterX() - 30));
                    double cosTing = Math.cos(omega * (totalTimeWhenStopped));
                    double eq = 2 * A * sinTing * cosTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : travelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) - (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
                for (Circle c : reTravelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) + (omega * (totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
            }
            T = 1 / f;
            omega = 2 * Math.PI * f;
            waveLength = v / f;
            k = (2 * Math.PI) / waveLength;
            timeToReachEnd = stringLength / v;
            periodTxt.setText("Period = " + String.format("%.3f", T) + " s");
            omegaTxt.setText("Angular Frequency = " + String.format("%.3f", omega) + " rad/s");
            lambdaTxt.setText("Wavelength = " + String.format("%.3f", lambda) + " cm");
            kTxt.setText("Wave Number = " + String.format("%.3f", k) + " rad/cm");
            if (Double.isInfinite(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isInfinite(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isInfinite(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isInfinite(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }
            if (Double.isNaN(T)) {
                periodTxt.setText("Period = 0.000 s");
            }
            if (Double.isNaN(omega)) {
                omegaTxt.setText("Angular Frequency = 0.000 rad/s");
            }
            if (Double.isNaN(lambda)) {
                lambdaTxt.setText("Wavelength = 0.000 cm");
            }
            if (Double.isNaN(k)) {
                kTxt.setText("Wave Number = 0.000 rad/cm");
            }
        });

        ampVBox.getChildren().addAll(ampText,ampTf,ampSldr);
        sliders.getChildren().addAll(freqVBox, wavSpdVBox, ampVBox);
        ui.getChildren().add(sliders);
        freqVBox.setLayoutX(10);
        wavSpdVBox.setLayoutX(260);
        ampVBox.setLayoutX(500);
        freqSldr.setId("light");
        wavSpdSldr.setId("light");
        ampSldr.setId("light");
        freqText.setId("texts");
        ampText.setId("texts");
        wavSpdText.setId("texts");
        freqTf.setId("texts");
        ampTf.setId("texts");
        wavSpdTf.setId("texts");

        Line separator = new Line(100, 190, 900, 190);
        root.getChildren().add(separator);
        Pane actionData = new Pane();
        controls.getChildren().add(actionData);

        // Legend
        VBox legend = new VBox(5);
        HBox incidTraveLeg = new HBox(10);
        Line inciTravLine = new Line(30, 0, 40, 0);
        inciTravLine.setStroke(Color.CORNFLOWERBLUE);
        inciTravLine.setStrokeWidth(5);
        Text inciTravLegTxt = new Text("Incident Traveling Wave");
        inciTravLegTxt.setId("texts");
        incidTraveLeg.getChildren().addAll(inciTravLine, inciTravLegTxt);

        HBox refTravLeg = new HBox(10);
        Line refTravLine = new Line(30, 30, 40, 30);
        refTravLine.setStroke(Color.ORANGERED);
        refTravLine.setStrokeWidth(5);
        Text refTravLegTxt = new Text("Reflected Traveling Wave");
        refTravLegTxt.setId("texts");
        refTravLeg.getChildren().addAll(refTravLine, refTravLegTxt);

        HBox standLeg = new HBox(10);
        Line standLine = new Line(30, 40, 40, 40);
        standLine.setStroke(Color.DARKMAGENTA);
        standLine.setStrokeWidth(5);
        Text standLegTxt = new Text("Standing Wave");
        standLegTxt.setId("texts");
        standLeg.getChildren().addAll(standLine, standLegTxt);

        Text hoverInstruction = new Text("Pause and hover over a point to display its coordinates");
        hoverInstruction.setId("texts");
        legend.getChildren().addAll(incidTraveLeg, refTravLeg, standLeg);
        actionData.getChildren().add(legend);
        legend.setLayoutX(130);
        legend.setLayoutY(20);

        // Start Button
        actionData.getChildren().add(playBtn);
        playBtn.setLayoutX(450);
        playBtn.setLayoutY(50);

        // Displayed Values
        VBox exData = new VBox(5);
        exData.getChildren().addAll(periodTxt, omegaTxt, lambdaTxt, kTxt);
        actionData.getChildren().add(exData);
        exData.setLayoutX(650);
        exData.setLayoutY(20);

        // Grid Lines Setup
        for(int i = 70; i <= wavesPane.getPrefHeight() - 60; i += 20) {
            horiGrid = new Line(30, i + 2, 970, i + 2);
            horiGrid.setStroke(Color.LIGHTGRAY);
            hLineList.add(horiGrid);
            wavesPane.getChildren().add(horiGrid);
        }

        for(int i = 30; i <= 990; i += 20) {
            vertGrid = new Line(i, 72, i, wavesPane.getPrefHeight() - 73);
            vertGrid.setStroke(Color.LIGHTGRAY);
            vLineList.add(vertGrid);
            wavesPane.getChildren().add(vertGrid);
        }

        // Toggle Grid Display
        gridOn.setOnAction(actionEvent -> {
            for(Line l: hLineList) {
                l.setVisible(true);
            }
            for(Line l: vLineList) {
                l.setVisible(true);
            }
            gridOff.setSelected(false);
            gridOn.setSelected(true);
        });

        gridOff.setOnAction(actionEvent -> {
            for (Line l : hLineList) {
                l.setVisible(false);
            }
            for (Line l : vLineList) {
                l.setVisible(false);
            }
            gridOn.setSelected(false);
            gridOff.setSelected(true);
        });

        //Creating X&Y Axis Lines
        Line xAxis = new Line();
        xAxis.setStartX(10);
        xAxis.setEndX(970);
        xAxis.setStartY(wavesPane.getPrefHeight() / 2);
        xAxis.setEndY(wavesPane.getPrefHeight() / 2);
        Text xAxisTitle = new Text("X-Position (cm)");
        xAxisTitle.setFont(font);
        xAxisTitle.setLayoutX(866);
        xAxisTitle.setLayoutY(xAxis.getStartY() + 134);

        Line yAxis = new Line();
        yAxis.setStartX(30);
        yAxis.setEndX(30);
        yAxis.setStartY(72);
        yAxis.setEndY(wavesPane.getPrefHeight() - 72);
        Text yAxisTitle = new Text("Y-Position (cm)");
        yAxisTitle.setFont(font);
        yAxisTitle.setLayoutX(0);
        yAxisTitle.setLayoutY(60);

        wavesPane.getChildren().addAll(xAxis, xAxisTitle, yAxis, yAxisTitle, hoverInstruction);
        hoverInstruction.setLayoutX(310);
        hoverInstruction.setLayoutY(60);

        // X-Axis indices
        for(int i = 40; i < 980; i += 20) {
            xIndic = new Line(i + 10, xAxis.getStartY() - 5, i + 10, xAxis.getStartY() + 5);
            xIndiList.add(xIndic);
            wavesPane.getChildren().add(xIndic);
        }
        for(int i = 120; i < 980; i += 100) {
            int actNb = i - 20;
            xL = new Text("" + actNb);
            xL.setFont(Font.font("Verdana", FontWeight.BOLD, FontPosture.REGULAR, 11));
            xL.setLayoutX(i);
            xL.setLayoutY(xAxis.getStartY() + 20);
            xLabelList.add(xL);
            wavesPane.getChildren().add(xL);
        }

        // Y-Axis indices
        for(int i = (int) wavesPane.getPrefHeight() - 70; i >= 60; i -= 20) {
            yIndic = new Line(yAxis.getStartX() - 5, i - 2, yAxis.getStartX() + 5, i - 2);
            yIndiList.add(yIndic);
            wavesPane.getChildren().add(yIndic);
        }
        for(int i = 340; i > 80; i -= 20) {
            int actNb = (int) ((i - xAxis.getStartY()) / 2);
            int dd = (actNb * -1 + 14) * 2;
            yL = new Text("" + (dd));
            yL.setFont(Font.font("Verdana", FontWeight.BOLD, FontPosture.REGULAR, 11));
            yL.setLayoutY(i - 24);
            yL.setLayoutX(-5);
            yLabelList.add(yL);
            wavesPane.getChildren().add(yL);
        }

        // Creating Incident Traveling Wave
        for(int i = 30; i <= 970; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 2, Color.CORNFLOWERBLUE);
            travelList.add(c);
        }
        for(Circle c: travelList) {
            wavesPane.getChildren().add(c);
        }

        // Creating Reflected Traveling Wave
        for(int i = 30; i <= 970; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 2, Color.ORANGERED);
            reTravelList.add(c);
        }
        for(Circle c: reTravelList) {
            wavesPane.getChildren().add(c);
        }

        // Creating Standing Wave
        for(int i = 30; i <= 970; i++) {
            c = new Circle(i, wavesPane.getPrefHeight()/2, 3, Color.DARKMAGENTA);
            standList.add(c);
        }
        for(Circle c: standList) {
            wavesPane.getChildren().add(c);
        }

        // Light Mode
        lightMode.setOnAction(actionEvent -> {
            darkMode.setSelected(false);
            lightMode.setSelected(true);
            root.setStyle("-fx-background-color: white");
            inciTravLine.setStroke(Color.CORNFLOWERBLUE);
            refTravLine.setStroke(Color.ORANGERED);
            standLine.setStroke(Color.DARKMAGENTA);
            separator.setStroke(Color.BLACK);
            xAxis.setStroke(Color.BLACK);
            yAxis.setStroke(Color.BLACK);
            simTitle.setFill(Color.BLACK);
            inciTravLegTxt.setFill(Color.BLACK);
            refTravLegTxt.setFill(Color.BLACK);
            freqText.setFill(Color.BLACK);
            wavSpdText.setFill(Color.BLACK);
            ampText.setFill(Color.BLACK);
            standLegTxt.setFill(Color.BLACK);
            coordinateTxt.setFill(Color.BLACK);
            periodTxt.setFill(Color.BLACK);
            omegaTxt.setFill(Color.BLACK);
            lambdaTxt.setFill(Color.BLACK);
            hoverInstruction.setFill(Color.BLACK);
            kTxt.setFill(Color.BLACK);
            xAxisTitle.setFill(Color.BLACK);
            yAxisTitle.setFill(Color.BLACK);
            helpPane.setStyle("-fx-background-color: whitesmoke");
            theoVbox.setStyle("-fx-background-color: whitesmoke");
            theoryTxt.setFill(Color.BLACK);
            wavesEgDesc.setFill(Color.BLACK);
            theoryTxt2.setFill(Color.BLACK);
            theoEqn.setFill(Color.BLACK);
            sourcesTitle.setFill(Color.BLACK);
            profDaveRef.setFill(Color.BLACK);
            britAmpRef.setFill(Color.BLACK);
            britWaveRef.setFill(Color.BLACK);
            helpSeparator.setStroke(Color.BLACK);
            menuView.setImage(menuIcon);
            menuBtn.setStyle("-fx-background-color: #ffffff;-fx-border-color: black;");
            ampTf.setStyle("-fx-background-color: #ffffff;-fx-border-color: black;");
            freqTf.setStyle("-fx-background-color: #ffffff;-fx-border-color: black;");
            wavSpdTf.setStyle("-fx-background-color: #ffffff;-fx-border-color: black;");
            freqSldr.setId("light");
            wavSpdSldr.setId("light");
            ampSldr.setId("light");

            for(Line l: xIndiList) {
                l.setStroke(Color.BLACK);
            }
            for(Text t: xLabelList) {
                t.setFill(Color.BLACK);
            }
            for(Line l: yIndiList) {
                l.setStroke(Color.BLACK);
            }
            for(Text t: yLabelList) {
                t.setFill(Color.BLACK);
            }
            for(Circle c: travelList) {
                c.setStroke(Color.CORNFLOWERBLUE);
            }
            for(Circle c: reTravelList) {
                c.setStroke(Color.MAROON);
            }
            for(Circle c: standList) {
                c.setStroke(Color.DARKMAGENTA);
            }

        });

        // Dark Mode
        darkMode.setOnAction(actionEvent -> {
            lightMode.setSelected(false);
            darkMode.setSelected(true);
            root.setStyle("-fx-background-color: #303030");
            simTitle.setFill(Color.WHITE);
            inciTravLegTxt.setFill(Color.WHITE);
            refTravLegTxt.setFill(Color.WHITE);
            standLegTxt.setFill(Color.WHITE);
            coordinateTxt.setFill(Color.WHITE);
            hoverInstruction.setFill(Color.WHITE);
            periodTxt.setFill(Color.WHITE);
            omegaTxt.setFill(Color.WHITE);
            lambdaTxt.setFill(Color.WHITE);
            kTxt.setFill(Color.WHITE);
            ampText.setFill(Color.WHITE);
            xAxisTitle.setFill(Color.WHITE);
            freqText.setFill(Color.WHITE);
            wavSpdText.setFill(Color.WHITE);
            yAxisTitle.setFill(Color.WHITE);
            helpPane.setStyle("-fx-background-color: #303030");
            theoVbox.setStyle("-fx-background-color: #303030");
            theoryTxt.setFill(Color.WHITE);
            wavesEgDesc.setFill(Color.WHITE);
            theoryTxt2.setFill(Color.WHITE);
            theoEqn.setFill(Color.WHITE);
            sourcesTitle.setFill(Color.WHITE);
            profDaveRef.setFill(Color.WHITE);
            britAmpRef.setFill(Color.WHITE);
            britWaveRef.setFill(Color.WHITE);
            helpSeparator.setStroke(Color.WHITE);
            ampTf.setStyle("-fx-background-color: #303030; -fx-text-fill: white;");
            freqTf.setStyle("-fx-background-color: #303030; -fx-text-fill: white;");
            wavSpdTf.setStyle("-fx-background-color: #303030; -fx-text-fill: white;");
            menuView.setImage(nMenuIcon);
            menuBtn.setStyle("-fx-background-color: #303030; -fx-border-color: white;");
            freqSldr.setId("dark");
            wavSpdSldr.setId("dark");
            ampSldr.setId("dark");
            separator.setStroke(Color.WHITE);
            inciTravLine.setStroke(Color.CYAN);
            refTravLine.setStroke(Color.ORANGERED);
            standLine.setStroke(omori);
            xAxis.setStroke(Color.WHITE);
            yAxis.setStroke(Color.WHITE);

            for (Line l : xIndiList) {
                l.setStroke(Color.WHITE);
            }
            for (Text t : xLabelList) {
                t.setFill(Color.WHITE);
            }
            for (Line l : yIndiList) {
                l.setStroke(Color.WHITE);
            }
            for (Text t : yLabelList) {
                t.setFill(Color.WHITE);
            }
            for (Circle c : travelList) {
                c.setStroke(Color.CYAN);
            }
            for (Circle c : reTravelList) {
                c.setStroke(Color.ORANGERED);
            }
            for (Circle c : standList) {
                c.setStroke(omori);
            }

        });

        // Toggle Wave Visibility
        toggleIncident.setOnAction(actionEvent -> {
            incidentCounter += 1;
            if (incidentCounter % 2 == 1) {
                toggleIncident.setSelected(false);
                for(Circle c: travelList) {
                    c.setVisible(false);
                }
            }

            if (incidentCounter % 2 == 0) {
                toggleIncident.setSelected(true);
                for(Circle c: travelList) {
                    c.setVisible(true);
                }
            }
        });

        toggleReflected.setOnAction(actionEvent -> {
            reflectedCounter += 1;
            if (reflectedCounter % 2 == 1) {
                toggleReflected.setSelected(false);
                for (Circle c : reTravelList) {
                    c.setVisible(false);
                }
            }
            if (reflectedCounter % 2 == 0) {
                toggleReflected.setSelected(true);
                for (Circle c : reTravelList) {
                    c.setVisible(true);
                }
            }
        });

        toggleStanding.setOnAction(actionEvent -> {
            standingCounter += 1;
            if(standingCounter % 2 == 1) {
                toggleStanding.setSelected(false);
                for(Circle c: standList) {
                    c.setVisible(false);
                }
            }
            if(standingCounter % 2 == 0) {
                toggleStanding.setSelected(true);
                for(Circle c: standList) {
                    c.setVisible(true);
                }
            }
        });

        // Fast/Slow/Normal Motion Options
        normalMotion.setOnAction(actionEvent -> {
            slowMotion.setSelected(false);
            fastMotion.setSelected(false);
            normalMotion.setSelected(true);
        });
        fastMotion.setOnAction(actionEvent -> {
            slowMotion.setSelected(false);
            normalMotion.setSelected(false);
            fastMotion.setSelected(true);
        });
        slowMotion.setOnAction(actionEvent -> {
            fastMotion.setSelected(false);
            normalMotion.setSelected(false);
            slowMotion.setSelected(true);
        });

        // Mode Numbers
        modeNumberAction(modeNumberOne, modeNumberTwo, modeNumberThree, modeNumberFour, modeNumberFive, modeNumberSix,
                freqSldr, wavSpdSldr, modeNumberOneValue);
        modeNumberAction(modeNumberTwo, modeNumberOne, modeNumberThree, modeNumberFour, modeNumberFive, modeNumberSix,
                freqSldr, wavSpdSldr, modeNumberTwoValue);
        modeNumberAction(modeNumberThree, modeNumberOne, modeNumberTwo, modeNumberFour, modeNumberFive, modeNumberSix,
                freqSldr, wavSpdSldr, modeNumberThreeValue);
        modeNumberAction(modeNumberFour, modeNumberOne, modeNumberTwo, modeNumberThree, modeNumberFive, modeNumberSix,
                freqSldr, wavSpdSldr, modeNumberFourValue);
        modeNumberAction(modeNumberFive, modeNumberOne, modeNumberTwo, modeNumberThree, modeNumberFour, modeNumberSix,
                freqSldr, wavSpdSldr, modeNumberFiveValue);
        modeNumberAction(modeNumberSix, modeNumberOne, modeNumberTwo, modeNumberThree, modeNumberFour, modeNumberFive,
                freqSldr, wavSpdSldr, modeNumberSixValue);

        // Math Equations and AnimationTimer
        AnimationTimer animateTimer = new AnimationTimer() {
            @Override
            public void handle(long l) {
                T = 1 / f;
                omega = 2 * Math.PI * f;
                lambda = v / f;
                k = (2 * Math.PI) / lambda;
                timeToReachEnd = stringLength / v;
                periodTxt.setText("Period = " + String.format("%.3f", T) + " s");
                omegaTxt.setText("Angular Frequency = " + String.format("%.3f", omega) + " rad/s");
                lambdaTxt.setText("Wavelength = " + String.format("%.3f", lambda) + " cm");
                kTxt.setText("Wave Number = " + String.format("%.3f", k) + " rad/cm");
                if (Double.isInfinite(T)) {
                    periodTxt.setText("Period = 0.000 s");
                }
                if (Double.isInfinite(omega)) {
                    omegaTxt.setText("Angular Frequency = 0.000 rad/s");
                }
                if (Double.isInfinite(lambda)) {
                    lambdaTxt.setText("Wavelength = 0.000 cm");
                }
                if (Double.isInfinite(k)) {
                    kTxt.setText("Wave Number = 0.000 rad/cm");
                }
                if (Double.isNaN(T)) {
                    periodTxt.setText("Period = 0.000 s");
                }
                if (Double.isNaN(omega)) {
                    omegaTxt.setText("Angular Frequency = 0.000 rad/s");
                }
                if (Double.isNaN(lambda)) {
                    lambdaTxt.setText("Wavelength = 0.000 cm");
                }
                if (Double.isNaN(k)) {
                    kTxt.setText("Wave Number = 0.000 rad/cm");
                }
                if(normalMotion.isSelected()) {
                    timeElapsed = timer.elapsed();
                }
                if(slowMotion.isSelected()) {
                    timeElapsed = timer.elapsed() / 5;
                }
                if(fastMotion.isSelected()) {
                    timeElapsed = timer.elapsed() * 5;
                }
                for(Circle c : standList) {
                    double sinTing = Math.sin(k * (c.getCenterX() - 30));
                    double cosTing = Math.cos(omega * (timeElapsed + totalTimeWhenStopped));
                    double eq = 2 * A * sinTing * cosTing;
                    c.setCenterY(192 + eq);
                }
                for(Circle c : travelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) - (omega * (timeElapsed
                            + totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
                for(Circle c : reTravelList) {
                    double sinTing = Math.sin((k * (c.getCenterX() - 30)) + (omega * (timeElapsed
                            + totalTimeWhenStopped)));
                    double eq = A * sinTing;
                    c.setCenterY(192 + eq);
                }
            }
        };

        // Pause & Play Button Setup
        playBtn.setOnAction(actionEvent -> {
            startPauseCounter += 1;
            if(startPauseCounter % 2 == 1) {
                playBtn.setText("Pause");
                animateTimer.start();
                timer = new Timer();
                hoverInstruction.setText("Pause the animation and hover over a point to display its precise " +
                        "coordinates.");
                hoverInstruction.setLayoutX(310);
            }
            if(startPauseCounter % 2 == 0) {
                playBtn.setText("Play");
                animateTimer.stop();
                timeWhenStopped = timer.elapsed();
                showCoordinates(hoverInstruction, standList);
                showCoordinates(hoverInstruction, travelList);
                showCoordinates(hoverInstruction, reTravelList);
                hoverInstruction.setLayoutX(310);

                if(normalMotion.isSelected()) {
                    totalTimeWhenStopped += timeWhenStopped;
                }
                if(fastMotion.isSelected()) {
                    totalTimeWhenStopped += 10 * timeWhenStopped;

                }
                if(slowMotion.isSelected()) {
                    totalTimeWhenStopped += timeWhenStopped / 10;
                }
            }
        });

        // Home Button Setup
        homeBtn.setOnAction(actionEvent -> {
            stage.close();
            Main m = new Main();
            m.start(new Stage());
            animateTimer.stop();
            startPauseCounter = 0;
            incidentCounter = 0;
            reflectedCounter = 0;
            A = 0;
            f = 0;
            T = 0;
            v = 0;
            omega = 0;
            lambda = 0;
            k = 0;
            waveLength = 0;
            timeToReachEnd = 0;
            timeElapsed = 0;
            timeWhenStopped = 0;
            totalTimeWhenStopped = 0;
            for (Circle c : travelList) {
                c.setCenterY(192);
            }
            for (Circle c : reTravelList) {
                c.setCenterY(192);
            }
            for (Circle c : standList) {
                c.setCenterY(192);
            }
        });

        // 'Bringing Everything Together'
        root.setCenter(wavesPane);
        Scene scene = new Scene(root, 1000, 650);
        scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource("waves.css")).toExternalForm());
        stage.setTitle("Standing Wave Simulator");
        stage.setResizable(false);
        stage.setScene(scene);
        stage.show();
    }

    private void modeNumberAction(CheckMenuItem modeNumberOne, CheckMenuItem modeNumberTwo,
                                  CheckMenuItem modeNumberThree, CheckMenuItem modeNumberFour,
                                  CheckMenuItem modeNumberFive, CheckMenuItem modeNumberSix,
                                  Slider freqSldr, Slider wavSpdSldr, double modeNumberOneValue) {
        modeNumberOne.setOnAction(actionEvent -> {
            freqSldr.setValue(0.50);
            wavSpdSldr.setValue(modeNumberOneValue);
            modeNumberOne.setSelected(true);
            modeNumberTwo.setSelected(false);
            modeNumberThree.setSelected(false);
            modeNumberFour.setSelected(false);
            modeNumberFive.setSelected(false);
            modeNumberSix.setSelected(false);
        });
    }

    private void showCoordinates(Text coordinateTxt, ArrayList<Circle> standList) {
        for (Circle c : standList) {
            c.setOnMouseEntered(mouseEvent -> {
                coordinateTxt.setText("Point Coordinates (x, y) = (" + String.format("%.2f",
                        (c.getCenterX() - 30)) + ", " + String.format("%.2f",  (192 - c.getCenterY())) + ")");
                coordinateTxt.setLayoutX(350);
            });
            c.setOnMouseExited(mouseEvent -> {
                coordinateTxt.setText("Point Coordinates (x, y) = (           ,         )");
                coordinateTxt.setLayoutX(350);
            });
        }
    }
}
