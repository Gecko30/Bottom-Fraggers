package com.example.physics;

import javafx.animation.*;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.ArrayList;

public class test extends Application {
    static Circle c;
    static ArrayList<Circle> circleList = new ArrayList<>();
    static ArrayList<TranslateTransition> timerArray = new ArrayList<>();
    static TranslateTransition tt;
    static double time = 0.0;
    static SequentialTransition s;
    static double del = 0.0;
    static Timer start, end, total;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws InterruptedException {
        Pane root = new Pane();
        Button play = new Button("play");
        for (int i = 0; i < 500; i+= 10) {
            c = new Circle(i + 50, 200, 10, Color.GREEN);
            circleList.add(c);
        }
        for (Circle c : circleList) {
            root.getChildren().addAll(c);
        }
        root.getChildren().addAll(play);
        play.setLayoutX(100);
        play.setLayoutY(50);

        for (Circle c : circleList) {
            tt = new TranslateTransition(Duration.seconds(1), c); //PERIOD = TWICE THE NUMBER (2 IN THIS CASE. TAKES 1 SECOND FOR HALF A PERIOD)
            tt.setFromY(c.getCenterY());
            tt.setToY(100);
            tt.setCycleCount(Timeline.INDEFINITE);
            tt.setAutoReverse(true);
            tt.setInterpolator(Interpolator.EASE_BOTH);
            timerArray.add(tt);
            //threads
        }
        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {

            }
        };
        play.setOnAction(actionEvent -> {
            start = new Timer();
            for (TranslateTransition t : timerArray) {
                s = new SequentialTransition(new PauseTransition(Duration.seconds(del)), t);
                s.play();
                del += 0.1; //EACH CIRCLE MOVES 0.1 seconds AFTER THE PREVIOUS ONE. 0.1 x 49 circles = 4.9 seconds to travel 540 - 50 = 490pxm
                //wave speed = 490 / 4.9 = 100m/s
            }
            for (Circle c : circleList) {
                System.out.println(c.getCenterX());
            }
            System.out.println("amplitude: 50m");
            System.out.println("period: 2s");
            System.out.println("frequency: 0.5Hz");
            System.out.println("angular frequency: pi");
            System.out.println("wave speed: 100m/s");
            System.out.println("wavelength: 200m");
        });

        Scene s = new Scene(root, 600, 600);
        primaryStage.setScene(s);
        primaryStage.show();
    }
}
